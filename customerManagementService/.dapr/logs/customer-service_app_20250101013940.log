== APP - customer-service == [nodemon] 3.1.9
== APP - customer-service == [nodemon] to restart at any time, enter `rs`
== APP - customer-service == [nodemon] watching path(s): *.*
== APP - customer-service == [nodemon] watching extensions: js,mjs,cjs,json
== APP - customer-service == [nodemon] starting `node app.js`
== APP - customer-service == Server is listening on PORT: 8081
== APP - customer-service == Failed to send SMS: AxiosError: Request failed with status code 500
== APP - customer-service ==     at settle (/home/iheb/Documents/Projects/bank-svc-app/customerManagementService/node_modules/axios/dist/node/axios.cjs:2026:12)
== APP - customer-service ==     at IncomingMessage.handleStreamEnd (/home/iheb/Documents/Projects/bank-svc-app/customerManagementService/node_modules/axios/dist/node/axios.cjs:3142:11)
== APP - customer-service ==     at IncomingMessage.emit (node:events:531:35)
== APP - customer-service ==     at endReadableNT (node:internal/streams/readable:1696:12)
== APP - customer-service ==     at process.processTicksAndRejections (node:internal/process/task_queues:82:21)
== APP - customer-service ==     at Axios.request (/home/iheb/Documents/Projects/bank-svc-app/customerManagementService/node_modules/axios/dist/node/axios.cjs:4252:41)
== APP - customer-service ==     at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
== APP - customer-service ==     at async sendSMS (/home/iheb/Documents/Projects/bank-svc-app/customerManagementService/app.js:50:5)
== APP - customer-service ==     at async handleTransactionCompletion (/home/iheb/Documents/Projects/bank-svc-app/customerManagementService/app.js:75:5) {
== APP - customer-service ==   code: 'ERR_BAD_RESPONSE',
== APP - customer-service ==   config: {
== APP - customer-service ==     transitional: {
== APP - customer-service ==       silentJSONParsing: true,
== APP - customer-service ==       forcedJSONParsing: true,
== APP - customer-service ==       clarifyTimeoutError: false
== APP - customer-service ==     },
== APP - customer-service ==     adapter: [ 'xhr', 'http', 'fetch' ],
== APP - customer-service ==     transformRequest: [ [Function: transformRequest] ],
== APP - customer-service ==     transformResponse: [ [Function: transformResponse] ],
== APP - customer-service ==     timeout: 0,
== APP - customer-service ==     xsrfCookieName: 'XSRF-TOKEN',
== APP - customer-service ==     xsrfHeaderName: 'X-XSRF-TOKEN',
== APP - customer-service ==     maxContentLength: -1,
== APP - customer-service ==     maxBodyLength: -1,
== APP - customer-service ==     env: { FormData: [Function], Blob: [class Blob] },
== APP - customer-service ==     validateStatus: [Function: validateStatus],
== APP - customer-service ==     headers: Object [AxiosHeaders] {
== APP - customer-service ==       Accept: 'application/json, text/plain, */*',
== APP - customer-service ==       'Content-Type': 'application/json',
== APP - customer-service ==       'User-Agent': 'axios/1.7.9',
== APP - customer-service ==       'Content-Length': '80',
== APP - customer-service ==       'Accept-Encoding': 'gzip, compress, deflate, br'
== APP - customer-service ==     },
== APP - customer-service ==     method: 'post',
== APP - customer-service ==     url: 'http://localhost:3510/v1.0/bindings/twilio-binding',
== APP - customer-service ==     data: '{"body":"Transaction Successful! Amount: 100, Date: 2024-12-31T17:51:59.748421"}'
== APP - customer-service ==   },
== APP - customer-service ==   request: <ref *1> ClientRequest {
== APP - customer-service ==     _events: [Object: null prototype] {
== APP - customer-service ==       abort: [Function (anonymous)],
== APP - customer-service ==       aborted: [Function (anonymous)],
== APP - customer-service ==       connect: [Function (anonymous)],
== APP - customer-service ==       error: [Function (anonymous)],
== APP - customer-service ==       socket: [Function (anonymous)],
== APP - customer-service ==       timeout: [Function (anonymous)],
== APP - customer-service ==       finish: [Function: requestOnFinish]
== APP - customer-service ==     },
== APP - customer-service ==     _eventsCount: 7,
== APP - customer-service ==     _maxListeners: undefined,
== APP - customer-service ==     outputData: [],
== APP - customer-service ==     outputSize: 0,
== APP - customer-service ==     writable: true,
== APP - customer-service ==     destroyed: true,
== APP - customer-service ==     _last: false,
== APP - customer-service ==     chunkedEncoding: false,
== APP - customer-service ==     shouldKeepAlive: true,
== APP - customer-service ==     maxRequestsOnConnectionReached: false,
== APP - customer-service ==     _defaultKeepAlive: true,
== APP - customer-service ==     useChunkedEncodingByDefault: true,
== APP - customer-service ==     sendDate: false,
== APP - customer-service ==     _removedConnection: false,
== APP - customer-service ==     _removedContLen: false,
== APP - customer-service ==     _removedTE: false,
== APP - customer-service ==     strictContentLength: false,
== APP - customer-service ==     _contentLength: '80',
== APP - customer-service ==     _hasBody: true,
== APP - customer-service ==     _trailer: '',
== APP - customer-service ==     finished: true,
== APP - customer-service ==     _headerSent: true,
== APP - customer-service ==     _closed: true,
== APP - customer-service ==     socket: Socket {
== APP - customer-service ==       connecting: false,
== APP - customer-service ==       _hadError: false,
== APP - customer-service ==       _parent: null,
== APP - customer-service ==       _host: 'localhost',
== APP - customer-service ==       _closeAfterHandlingError: false,
== APP - customer-service ==       _events: [Object],
== APP - customer-service ==       _readableState: [ReadableState],
== APP - customer-service ==       _writableState: [WritableState],
== APP - customer-service ==       allowHalfOpen: false,
== APP - customer-service ==       _maxListeners: undefined,
== APP - customer-service ==       _eventsCount: 6,
== APP - customer-service ==       _sockname: null,
== APP - customer-service ==       _pendingData: null,
== APP - customer-service ==       _pendingEncoding: '',
== APP - customer-service ==       server: null,
== APP - customer-service ==       _server: null,
== APP - customer-service ==       timeout: 5000,
== APP - customer-service ==       parser: null,
== APP - customer-service ==       _httpMessage: null,
== APP - customer-service ==       autoSelectFamilyAttemptedAddresses: [Array],
== APP - customer-service ==       [Symbol(async_id_symbol)]: -1,
== APP - customer-service ==       [Symbol(kHandle)]: [TCP],
== APP - customer-service ==       [Symbol(lastWriteQueueSize)]: 0,
== APP - customer-service ==       [Symbol(timeout)]: Timeout {
== APP - customer-service ==         _idleTimeout: 5000,
== APP - customer-service ==         _idlePrev: [TimersList],
== APP - customer-service ==         _idleNext: [TimersList],
== APP - customer-service ==         _idleStart: 725,
== APP - customer-service ==         _onTimeout: [Function: bound ],
== APP - customer-service ==         _timerArgs: undefined,
== APP - customer-service ==         _repeat: null,
== APP - customer-service ==         _destroyed: false,
== APP - customer-service ==         [Symbol(refed)]: false,
== APP - customer-service ==         [Symbol(kHasPrimitive)]: false,
== APP - customer-service ==         [Symbol(asyncId)]: 51,
== APP - customer-service ==         [Symbol(triggerId)]: 49
== APP - customer-service ==       },
== APP - customer-service ==       [Symbol(kBuffer)]: null,
== APP - customer-service ==       [Symbol(kBufferCb)]: null,
== APP - customer-service ==       [Symbol(kBufferGen)]: null,
== APP - customer-service ==       [Symbol(shapeMode)]: true,
== APP - customer-service ==       [Symbol(kCapture)]: false,
== APP - customer-service ==       [Symbol(kSetNoDelay)]: true,
== APP - customer-service ==       [Symbol(kSetKeepAlive)]: true,
== APP - customer-service ==       [Symbol(kSetKeepAliveInitialDelay)]: 1,
== APP - customer-service ==       [Symbol(kBytesRead)]: 0,
== APP - customer-service ==       [Symbol(kBytesWritten)]: 0
== APP - customer-service ==     },
== APP - customer-service ==     _header: 'POST /v1.0/bindings/twilio-binding HTTP/1.1\r\n' +
== APP - customer-service ==       'Accept: application/json, text/plain, */*\r\n' +
== APP - customer-service ==       'Content-Type: application/json\r\n' +
== APP - customer-service ==       'User-Agent: axios/1.7.9\r\n' +
== APP - customer-service ==       'Content-Length: 80\r\n' +
== APP - customer-service ==       'Accept-Encoding: gzip, compress, deflate, br\r\n' +
== APP - customer-service ==       'Host: localhost:3510\r\n' +
== APP - customer-service ==       'Connection: keep-alive\r\n' +
== APP - customer-service ==       '\r\n',
== APP - customer-service ==     _keepAliveTimeout: 0,
== APP - customer-service ==     _onPendingData: [Function: nop],
== APP - customer-service ==     agent: Agent {
== APP - customer-service ==       _events: [Object: null prototype],
== APP - customer-service ==       _eventsCount: 2,
== APP - customer-service ==       _maxListeners: undefined,
== APP - customer-service ==       defaultPort: 80,
== APP - customer-service ==       protocol: 'http:',
== APP - customer-service ==       options: [Object: null prototype],
== APP - customer-service ==       requests: [Object: null prototype] {},
== APP - customer-service ==       sockets: [Object: null prototype] {},
== APP - customer-service ==       freeSockets: [Object: null prototype],
== APP - customer-service ==       keepAliveMsecs: 1000,
== APP - customer-service ==       keepAlive: true,
== APP - customer-service ==       maxSockets: Infinity,
== APP - customer-service ==       maxFreeSockets: 256,
== APP - customer-service ==       scheduling: 'lifo',
== APP - customer-service ==       maxTotalSockets: Infinity,
== APP - customer-service ==       totalSocketCount: 1,
== APP - customer-service ==       [Symbol(shapeMode)]: false,
== APP - customer-service ==       [Symbol(kCapture)]: false
== APP - customer-service ==     },
== APP - customer-service ==     socketPath: undefined,
== APP - customer-service ==     method: 'POST',
== APP - customer-service ==     maxHeaderSize: undefined,
== APP - customer-service ==     insecureHTTPParser: undefined,
== APP - customer-service ==     joinDuplicateHeaders: undefined,
== APP - customer-service ==     path: '/v1.0/bindings/twilio-binding',
== APP - customer-service ==     _ended: true,
== APP - customer-service ==     res: IncomingMessage {
== APP - customer-service ==       _events: [Object],
== APP - customer-service ==       _readableState: [ReadableState],
== APP - customer-service ==       _maxListeners: undefined,
== APP - customer-service ==       socket: null,
== APP - customer-service ==       httpVersionMajor: 1,
== APP - customer-service ==       httpVersionMinor: 1,
== APP - customer-service ==       httpVersion: '1.1',
== APP - customer-service ==       complete: true,
== APP - customer-service ==       rawHeaders: [Array],
== APP - customer-service ==       rawTrailers: [],
== APP - customer-service ==       joinDuplicateHeaders: undefined,
== APP - customer-service ==       aborted: false,
== APP - customer-service ==       upgrade: false,
== APP - customer-service ==       url: '',
== APP - customer-service ==       method: null,
== APP - customer-service ==       statusCode: 500,
== APP - customer-service ==       statusMessage: 'Internal Server Error',
== APP - customer-service ==       client: [Socket],
== APP - customer-service ==       _consuming: false,
== APP - customer-service ==       _dumped: false,
== APP - customer-service ==       req: [Circular *1],
== APP - customer-service ==       _eventsCount: 4,
== APP - customer-service ==       responseUrl: 'http://localhost:3510/v1.0/bindings/twilio-binding',
== APP - customer-service ==       redirects: [],
== APP - customer-service ==       [Symbol(shapeMode)]: true,
== APP - customer-service ==       [Symbol(kCapture)]: false,
== APP - customer-service ==       [Symbol(kHeaders)]: [Object],
== APP - customer-service ==       [Symbol(kHeadersCount)]: 8,
== APP - customer-service ==       [Symbol(kTrailers)]: null,
== APP - customer-service ==       [Symbol(kTrailersCount)]: 0
== APP - customer-service ==     },
== APP - customer-service ==     aborted: false,
== APP - customer-service ==     timeoutCb: null,
== APP - customer-service ==     upgradeOrConnect: false,
== APP - customer-service ==     parser: null,
== APP - customer-service ==     maxHeadersCount: null,
== APP - customer-service ==     reusedSocket: false,
== APP - customer-service ==     host: 'localhost',
== APP - customer-service ==     protocol: 'http:',
== APP - customer-service ==     _redirectable: Writable {
== APP - customer-service ==       _events: [Object],
== APP - customer-service ==       _writableState: [WritableState],
== APP - customer-service ==       _maxListeners: undefined,
== APP - customer-service ==       _options: [Object],
== APP - customer-service ==       _ended: true,
== APP - customer-service ==       _ending: true,
== APP - customer-service ==       _redirectCount: 0,
== APP - customer-service ==       _redirects: [],
== APP - customer-service ==       _requestBodyLength: 80,
== APP - customer-service ==       _requestBodyBuffers: [],
== APP - customer-service ==       _eventsCount: 3,
== APP - customer-service ==       _onNativeResponse: [Function (anonymous)],
== APP - customer-service ==       _currentRequest: [Circular *1],
== APP - customer-service ==       _currentUrl: 'http://localhost:3510/v1.0/bindings/twilio-binding',
== APP - customer-service ==       [Symbol(shapeMode)]: true,
== APP - customer-service ==       [Symbol(kCapture)]: false
== APP - customer-service ==     },
== APP - customer-service ==     [Symbol(shapeMode)]: false,
== APP - customer-service ==     [Symbol(kCapture)]: false,
== APP - customer-service ==     [Symbol(kBytesWritten)]: 0,
== APP - customer-service ==     [Symbol(kNeedDrain)]: false,
== APP - customer-service ==     [Symbol(corked)]: 0,
== APP - customer-service ==     [Symbol(kOutHeaders)]: [Object: null prototype] {
== APP - customer-service ==       accept: [Array],
== APP - customer-service ==       'content-type': [Array],
== APP - customer-service ==       'user-agent': [Array],
== APP - customer-service ==       'content-length': [Array],
== APP - customer-service ==       'accept-encoding': [Array],
== APP - customer-service ==       host: [Array]
== APP - customer-service ==     },
== APP - customer-service ==     [Symbol(errored)]: null,
== APP - customer-service ==     [Symbol(kHighWaterMark)]: 16384,
== APP - customer-service ==     [Symbol(kRejectNonStandardBodyWrites)]: false,
== APP - customer-service ==     [Symbol(kUniqueHeaders)]: null
== APP - customer-service ==   },
== APP - customer-service ==   response: {
== APP - customer-service ==     status: 500,
== APP - customer-service ==     statusText: 'Internal Server Error',
== APP - customer-service ==     headers: Object [AxiosHeaders] {
== APP - customer-service ==       'content-type': 'application/json',
== APP - customer-service ==       traceparent: '00-5609f5a1785c988166a0cc91bc17538b-9e46b6851f156dc3-01',
== APP - customer-service ==       date: 'Wed, 01 Jan 2025 00:39:40 GMT',
== APP - customer-service ==       'content-length': '139'
== APP - customer-service ==     },
== APP - customer-service ==     config: {
== APP - customer-service ==       transitional: [Object],
== APP - customer-service ==       adapter: [Array],
== APP - customer-service ==       transformRequest: [Array],
== APP - customer-service ==       transformResponse: [Array],
== APP - customer-service ==       timeout: 0,
== APP - customer-service ==       xsrfCookieName: 'XSRF-TOKEN',
== APP - customer-service ==       xsrfHeaderName: 'X-XSRF-TOKEN',
== APP - customer-service ==       maxContentLength: -1,
== APP - customer-service ==       maxBodyLength: -1,
== APP - customer-service ==       env: [Object],
== APP - customer-service ==       validateStatus: [Function: validateStatus],
== APP - customer-service ==       headers: [Object [AxiosHeaders]],
== APP - customer-service ==       method: 'post',
== APP - customer-service ==       url: 'http://localhost:3510/v1.0/bindings/twilio-binding',
== APP - customer-service ==       data: '{"body":"Transaction Successful! Amount: 100, Date: 2024-12-31T17:51:59.748421"}'
== APP - customer-service ==     },
== APP - customer-service ==     request: <ref *1> ClientRequest {
== APP - customer-service ==       _events: [Object: null prototype],
== APP - customer-service ==       _eventsCount: 7,
== APP - customer-service ==       _maxListeners: undefined,
== APP - customer-service ==       outputData: [],
== APP - customer-service ==       outputSize: 0,
== APP - customer-service ==       writable: true,
== APP - customer-service ==       destroyed: true,
== APP - customer-service ==       _last: false,
== APP - customer-service ==       chunkedEncoding: false,
== APP - customer-service ==       shouldKeepAlive: true,
== APP - customer-service ==       maxRequestsOnConnectionReached: false,
== APP - customer-service ==       _defaultKeepAlive: true,
== APP - customer-service ==       useChunkedEncodingByDefault: true,
== APP - customer-service ==       sendDate: false,
== APP - customer-service ==       _removedConnection: false,
== APP - customer-service ==       _removedContLen: false,
== APP - customer-service ==       _removedTE: false,
== APP - customer-service ==       strictContentLength: false,
== APP - customer-service ==       _contentLength: '80',
== APP - customer-service ==       _hasBody: true,
== APP - customer-service ==       _trailer: '',
== APP - customer-service ==       finished: true,
== APP - customer-service ==       _headerSent: true,
== APP - customer-service ==       _closed: true,
== APP - customer-service ==       socket: [Socket],
== APP - customer-service ==       _header: 'POST /v1.0/bindings/twilio-binding HTTP/1.1\r\n' +
== APP - customer-service ==         'Accept: application/json, text/plain, */*\r\n' +
== APP - customer-service ==         'Content-Type: application/json\r\n' +
== APP - customer-service ==         'User-Agent: axios/1.7.9\r\n' +
== APP - customer-service ==         'Content-Length: 80\r\n' +
== APP - customer-service ==         'Accept-Encoding: gzip, compress, deflate, br\r\n' +
== APP - customer-service ==         'Host: localhost:3510\r\n' +
== APP - customer-service ==         'Connection: keep-alive\r\n' +
== APP - customer-service ==         '\r\n',
== APP - customer-service ==       _keepAliveTimeout: 0,
== APP - customer-service ==       _onPendingData: [Function: nop],
== APP - customer-service ==       agent: [Agent],
== APP - customer-service ==       socketPath: undefined,
== APP - customer-service ==       method: 'POST',
== APP - customer-service ==       maxHeaderSize: undefined,
== APP - customer-service ==       insecureHTTPParser: undefined,
== APP - customer-service ==       joinDuplicateHeaders: undefined,
== APP - customer-service ==       path: '/v1.0/bindings/twilio-binding',
== APP - customer-service ==       _ended: true,
== APP - customer-service ==       res: [IncomingMessage],
== APP - customer-service ==       aborted: false,
== APP - customer-service ==       timeoutCb: null,
== APP - customer-service ==       upgradeOrConnect: false,
== APP - customer-service ==       parser: null,
== APP - customer-service ==       maxHeadersCount: null,
== APP - customer-service ==       reusedSocket: false,
== APP - customer-service ==       host: 'localhost',
== APP - customer-service ==       protocol: 'http:',
== APP - customer-service ==       _redirectable: [Writable],
== APP - customer-service ==       [Symbol(shapeMode)]: false,
== APP - customer-service ==       [Symbol(kCapture)]: false,
== APP - customer-service ==       [Symbol(kBytesWritten)]: 0,
== APP - customer-service ==       [Symbol(kNeedDrain)]: false,
== APP - customer-service ==       [Symbol(corked)]: 0,
== APP - customer-service ==       [Symbol(kOutHeaders)]: [Object: null prototype],
== APP - customer-service ==       [Symbol(errored)]: null,
== APP - customer-service ==       [Symbol(kHighWaterMark)]: 16384,
== APP - customer-service ==       [Symbol(kRejectNonStandardBodyWrites)]: false,
== APP - customer-service ==       [Symbol(kUniqueHeaders)]: null
== APP - customer-service ==     },
== APP - customer-service ==     data: {
== APP - customer-service ==       errorCode: 'ERR_INVOKE_OUTPUT_BINDING',
== APP - customer-service ==       message: 'error invoking output binding twilio-binding: operation field is missing from request'
== APP - customer-service ==     }
== APP - customer-service ==   },
== APP - customer-service ==   status: 500
== APP - customer-service == }
== APP - customer-service == Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'customers' AND TABLE_SCHEMA = 'customers'
== APP - customer-service == Executing (default): SHOW INDEX FROM `customers`
== APP - customer-service == Models synchronized with the database.
== APP - customer-service == [nodemon] restarting due to changes...
== APP - customer-service == [nodemon] starting `node app.js`
== APP - customer-service == Server is listening on PORT: 8081
== APP - customer-service == Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'customers' AND TABLE_SCHEMA = 'customers'
== APP - customer-service == Executing (default): SHOW INDEX FROM `customers`
== APP - customer-service == Models synchronized with the database.
== APP - customer-service == SMS sent successfully

termination signal received: shutting down
