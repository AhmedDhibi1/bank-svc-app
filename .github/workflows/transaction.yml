name: CI Pipeline for Python Project

on:
  push:
    branches:
      - branch2
    paths:
      - "transaction/**"
  pull_request:
    branches:
      - branch2

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./transaction/

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure all commit history is fetched for better analysis
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: sonar scan
        uses: SonarSource/sonarqube-scan-action@v3
        with:
          args: >
            -Dsonar.projectKey=transaction-service
            -Dsonar.sources=transaction
            -Dsonar.exclusions=account_service/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN3 }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/transaction-service:latest .
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/transaction-service:latest

  deployments:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set up AKS credentials
        run: |
          az aks get-credentials --resource-group application --name kube --overwrite-existing
      - name: apply services
        run: |
          kubectl apply -f ./transaction/k8s/services/
      - name: apply dapr config
        run: |
          kubectl apply -f ./transaction/k8s/dapr-config/
      - name: apply config maps
        run: |
          kubectl apply -f ./transaction/k8s/configmaps/
      - name: Deploy Zipkin
        run: |
          set -e
          echo "Deploying Zipkin..."
          kubectl apply -f ./transaction/k8s/deployments/zipkin-deployment.yaml
          kubectl apply -f ./transaction/k8s/services/zipkin-service.yaml
          echo "Waiting for Zipkin to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/zipkin
          echo "Zipkin deployed successfully."
      - name: Deploy Transaction Microservice
        run: |
          kubectl apply -f ./transaction/k8s/deployments/transaction.yml
          sleep 10  # Wait for the deployment to be ready
      #- name: Check Deployment Status
      #  run: |
      #    kubectl rollout status deployment/transaction-service
      - name: Get Pods Status
        run: |
          kubectl get pods -o wide
      - name: Retrieve Logs
        run: |
          kubectl logs -l app=transaction-service
