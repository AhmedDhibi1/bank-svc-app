name: CI Pipeline for account_service

on:
  push:
    branches: 
      - branch2
    paths:
      - 'account_service/**'
  pull_request:
    branches:
      - branch2

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./account_service

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Make mvnw executable
    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build and analyze
      env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=account_service -DskipTests


    # Run SonarQube analysis
    #- name: Run SonarQube analysis
    #  run: ./mvnw clean verify sonar:sonar -Dsonar.projectKey=account_service

    # Set up JDK 17
    
    - name: Make mvnw executable
      run: chmod +x ./mvnw

    # Build with Maven
    - name: Build with Maven
      run: ./mvnw package -DskipTests

    # List target directory contents
    - name: List target directory contents
      run: ls -al ./target/
          
    # Upload artifact to Nexus
    - name: Upload artifact to Nexus
      run: |
        curl -v -u ${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }} --upload-file ./target/*.jar ${{ secrets.NEXUS_URL }}/repository/maven-releases/com/your-org/account_service/1.0.0/account_service-1.0.0.jar

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/account_service:latest .

    # Push Docker image to Docker Hub
    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/account_service:latest

  aks-login:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up AKS credentials
      run: |
        az aks get-credentials --resource-group application --name kube --overwrite-existing

    - name: Verify Kubernetes context
      run: |
        kubectl get nodes